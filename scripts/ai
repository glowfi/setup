#!/bin/python3

import poe
import subprocess
import os
from colorama import init, Fore, Style
import sys
import tempfile


# Constants
token = ""
file = "conversations.md"
location = os.path.expanduser("~/.local/share/poe")
openviewer = "no"


def help():
    print("Any one out of the below arguments can be passed at a time.\n")
    print("Example: ai k\n")
    print("Arguments :")
    print("h  open help")
    print("k  Kill all nvim processes")
    print("d  Delete all conversations stored on this computer")
    print("p  Delete all conversations stored on the server")
    print("v  Open conversations viewer stored on this computer")


# Kill all nvim processes associated with this script
def kill():
    os.system(
        "ps aux | grep 'Markdown' | head | awk '{print $2}' | xargs -I {} kill -9 {} > /dev/null 2>&1"
    )
    os.system(
        "ps aux | grep 'index.js' | head | awk '{print $2}' | xargs -I {} kill -9 {} > /dev/null 2>&1"
    )


# Get the command line arguments
args = sys.argv

if len(args) > 1:
    if args[1] == "k":
        kill()
        print("Killed all processes!")
        exit(0)
    elif args[1] == "d":
        os.system(f"rm -rf {location}")
        print("Deleted the saved conversation!")
        exit(0)
    elif args[1] == "v":
        openviewer = "yes"
    elif args[1] == "h":
        help()
        exit(0)


# Initialize Poe
print(Fore.RED + "Initializing .....")
client = poe.Client(token)
print(Fore.GREEN + "Client Initialized!")
print(Style.RESET_ALL)

# Initialize colorama
init()


def _read():
    with open(f"{location}/{file}", "a+") as f:
        subprocess.Popen(
            [
                "setsid",
                "nvim",
                "--headless",
                "-c",
                ":MarkdownPreview",
                f"{location}/{file}",
            ],
            stdout=subprocess.DEVNULL,
            stderr=subprocess.DEVNULL,
        )


# Save Conversation
def save(message, data):
    # words = message.split()
    # capitalized_words = [word.capitalize() for word in words]
    # message = " ".join(capitalized_words)
    with open(f"{location}/{file}", "a+") as f:
        f.write(
            "\n\n"
            + "#### ========= Start of Conversation ========== \n"
            + '<h3 style="color: red;">Question : </h3> \n'
            + f'<h2><div style="background-color: #e0ddda;">{message}</div></h2>\n'
            + f'<h2><p style="color: green;">Reply :</p></h2>\n'
            + "\n\n"
            + f"{data}\n\n"
            + "#### ========= End of Conversation ============= \n\n\n"
        )

        if openviewer == "yes":
            kill()
            _read()


# File Check
def fileCheck():
    # Create File if not exists
    if not os.path.exists(location):
        os.makedirs(location)
        with open(f"{location}/{file}", "w") as f:
            f.write("")
    # Otherwise read the file
    else:
        if openviewer == "yes":
            kill()
            _read()


def get_input():
    with tempfile.NamedTemporaryFile(mode="w+", delete=False) as tmp_file:
        tmp_file.close()
        editor = os.environ.get("EDITOR", "vi")
        os.system(f"{editor} {tmp_file.name}")
        with open(tmp_file.name, "r") as f:
            input_text = f.read()
        os.unlink(tmp_file.name)
    return input_text


def prompt():
    conversationNumber = 1
    chunk = {"text": ""}

    print("========= Start of Conversation ==========")
    # Take User Input
    while True:
        print("\n")
        print(Fore.BLUE + f"Converation {conversationNumber} :", Style.RESET_ALL)
        print("========================================")

        choose = input(
            Fore.LIGHTBLUE_EX
            + "Press e to write message in an editor.\nPress n to input message normally\n"
            + Fore.LIGHTCYAN_EX
            + "\nChoose:"
        )

        if choose == "e":
            message = get_input()
            print(Fore.RED + "\nYour Message :  " + Fore.MAGENTA + message)
        else:
            print("")
            message = input(Fore.RED + "Enter Your message :  " + Fore.MAGENTA)

        if message == "":
            message = "Do not reply to this message"

        if choose != "e":
            print("")

        print(Fore.GREEN + "Reply :", Fore.YELLOW)
        for chunk in client.send_message("capybara", message):
            print(chunk["text_new"], end="", flush=True)
        print(Style.RESET_ALL)
        print("========================================")

        save(message, chunk["text"])
        conversationNumber += 1


# Purge all conversations
if len(args) > 1:
    if args[1] == "p":
        client.purge_all_conversations()
        print("Purged all Conversations")
        exit(0)

# Check File exists
fileCheck()

# Start prompt
prompt()
