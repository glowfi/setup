#!/bin/bash

usage() {
	echo "Usage: ./base64img [FILE]"
	echo "Formats: APNG BMP GIF JPEG PNG WEBP"
	echo "Given an Image and take away base64 formatted image wrapped inside an <img> HTML Tag"
}

base64_html() {
	# Grab the image format
	fmt=$(file "$1" | grep -iEo 'apng|bmp|gif|jpeg|png|webp' | head -n1 | tr '[:upper:]' '[:lower:]')

	# Check if the image format is supported
	[ -z "$fmt" ] && usage && exit 1

	# Create an IMG template
	img="<img src='data:image/"$fmt";base64, $(base64 -w 0 "$1")' />"

	echo "base64 img: ${img}"
	echo "$img" | xclip -sel c
	echo "Copied to clipboard!"
	notify-send "Copied to clipboard!"

}

base64_encode() {
	# Read the input string
	read -p "Enter a string to encode: " input

	# Encode the input string to base64
	encoded=$(echo -n "$input" | base64)

	# Print the encoded string
	echo "Encoded string: $encoded"
	echo "$encoded" | xclip -sel c
	echo "Copied to clipboard!"
	notify-send "Copied to clipboard!"
}

base64_decode() {
	# Read the base64 string
	read -p "Enter a base64 string to decode: " input

	# Decode the base64 string
	decoded=$(echo -n "$input" | base64 -d)

	# Print the decoded string
	echo "Decoded string: $decoded"
	echo "$decoded" | xclip -sel c
	echo "Copied to clipboard!"
	notify-send "Copied to clipboard!"
}

if [[ "$1" = "html" ]]; then
	if [[ "$2" != "" ]]; then
		base64_html "$2"
	else
		usage
	fi
elif [[ "$1" = "e" ]]; then
	base64_encode
elif [[ "$1" = "d" ]]; then
	base64_decode
fi
